--- src/pgp_import_keydata.rs	2023-09-05 10:06:07
+++ src/pgp_import_keydata_strict.rs	2023-09-05 10:03:01
@@ -1,9 +1,10 @@
-ffi!(fn pgp_import_keydata(session: *mut Session,
-                           keydata: *const c_char,
-                           keydata_len: size_t,
-                           identity_listp: *mut *mut PepIdentityListItem,
-                           imported_keysp: *mut *mut StringListItem,
-                           changed_key_indexp: *mut u64)
+ffi!(fn pgp_import_keydata_strict(session: *mut Session,
+                                   keydata: *const c_char,
+                                   keydata_len: size_t,
+                                   identity_key: *mut PepIdentity,
+                                   identity_listp: *mut *mut PepIdentityListItem,
+                                   imported_keysp: *mut *mut StringListItem,
+                                   changed_key_indexp: *mut u64)
     -> Result<()>
 {
     let session = Session::as_mut(session)?;
\ No newline at end of file
@@ -28,6 +29,7 @@
     let mut changed_key_index: u64 = unsafe { changed_key_indexp.as_mut() }
         .map(|p| *p)
         .unwrap_or(0);
+    let identity_key = unsafe { identity_key.as_mut() }.unwrap();
 
     // Get the start of each ascii armor block.
     let mut offsets = Vec::new();
\ No newline at end of file
@@ -44,55 +46,21 @@
     log::trace!("armor block offsets: {:?}", offsets);
 
     let retval = if offsets.len() == 0 {
-        import_keydata(session,
-                       keydata,
-                       &mut identity_list,
-                       &mut imported_keys,
-                       &mut changed_key_index)
+        return Err(Error::IllegalValue(
+            "No ASCII armor found"
+                .into()));
     } else if offsets.len() == 1 {
-        import_keydata(session,
+        import_keydata_strict(session,
                        &keydata[offsets[0]..],
+                       identity_key,
                        &mut identity_list,
                        &mut imported_keys,
                        &mut changed_key_index)
     } else {
-        let mut retval = Error::KeyImported;
+        return Err(Error::IllegalValue(
+            "Too ASCII armored messages found."
+                .into()));
 
-        offsets.push(keydata.len());
-        for offsets in offsets.windows(2) {
-            let keydata = &keydata[offsets[0]..offsets[1]];
-
-            let curr_status = import_keydata(session,
-                                             keydata,
-                                             &mut identity_list,
-                                             &mut imported_keys,
-                                             &mut changed_key_index);
-
-            // import_keydata should not return Ok; on success, it
-            // should return KeyImported.
-            let curr_status = match curr_status {
-                Err(err) => err,
-                Ok(()) => panic!("import_keydata returned Ok"),
-            };
-
-            if ErrorCode::from(&curr_status) != ErrorCode::from(&retval) {
-                match curr_status {
-                    Error::NoKeyImported
-                    | Error::KeyNotFound(_)
-                    | Error::UnknownError(_, _) => {
-                        match retval {
-                            Error::KeyImported => retval = Error::SomeKeysImported,
-                            Error::UnknownError(_, _) => retval = curr_status,
-                            _ => (),
-                        }
-                    }
-                    Error::KeyImported => retval = Error::SomeKeysImported,
-                    _ => (),
-                }
-            }
-        }
-
-        Err(retval)
     };
 
     unsafe { identity_listp.as_mut() }.map(|p| {
\ No newline at end of file
@@ -106,4 +74,5 @@
     });
 
     retval
+
 });
\ No newline at end of file
